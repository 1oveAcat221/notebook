vnote_backup_file_826537664 C:/Users/64266/OneDrive/笔记/计算机/分布式系统/分布式系统基础知识.md
# 分布式系统基础知识
[TOC]
## 1.1 概述
### 什么是分布式系统
> 分布式系统是若干独立计算机的集合，这些计算机对于用户来说就像单个相关系统。
 
 
- 硬件独立
- 软件统一
 
 
### 集中式和分布式
**集中式：**
- 单机性能强
- 可靠性要求高
 
 
**分布式：**
- 通过中间软件来对现有计算机的硬件能力和相应的软件功能进行重新配置和整合
- 多处理器系统，各处理器通过网络构成统一的系统
- 成本低
- 易维护
 
 
### 如何设计分布式系统
> 如何合理地将一个系统拆分成多个子系统并部署到不同机器上
 
 
- 如何拆分
- 如何通信
- 通信安全
- 可扩展
- 可靠性
- 一致性
 
 
**面对的挑战：**
- 异构性
分布式系统基于不同的网络、操作系统、计算机硬件和编程语言来构造，必须考虑一种通用的网络通信协议来屏蔽异构系统之间的差异。一般交由中间件来处理这些差异。
 
 
- 缺乏全球时钟
在程序需要协作时，通过交换消息来协调它们的动作。紧密的协调经常依赖于对程序动作发生时间的共识。但是实际上计算机同步时钟的准确性受到极大的限制。
 
 
- 一致性
- 故障的独立性
分布式系统要求允许出现部分故障而不影响整个系统的正常使用。
 
 
- 并发
分布式系统的目的是为了更好地共享资源，系统中的每个资源都必须被设计成在并发环境中是安全的。
 
 
- 透明性
分布式系统中任何组件的故障或者主机的升级、迁移，对于用户都是透明的、不可见的。
 
 
- 开放性
分布式系统由不同的程序员来编写不同的组件，组件最终集成为一个系统，那么组件所发布的接口必须遵守一定的规范且能够被相互理解。
 
 
- 安全性
在网络上传递的敏感信息都需要进行加密，DoS是个问题
 
 
- 可扩展性
 
 
## 1.2 线程
进程是资源的拥有者，创建、撤销与切换存在较大的时空开销；由于对称多处理机（Symmetric MultiProcessor，SMP）出现，可以满足多个运行单位，而多个进程并行开销过大。
 
 
### 什么是线程
线程是CPU资源分配的最小单元，一个标准的线程由**线程ID、当前指令指针（PC）、寄存器集合和堆栈**组成。线程可以和同属一个进程的其他线程共享进程所拥有的全部资源。同一个进程中的多个线程之间可以并发执行，由于线程之间的相互制约，致使线程在运行中呈现出间断性。
**线程的三种基本状态：**
- 就绪
- 阻塞
- 运行
![线程状态](http://image.loveacat.xyz/images/2019/04/07/Image.png)
 
 
> Inter Process Communication, IPC不仅用于同个系统的进程之间的通信，也可以用在不同系统的进程之间进行通信。
 
 
 
 
### 进程和线程
- 进程有一个独立的执行环境，通常有一个完整的、私人的基本运行时资源。每个进程都有自己的内存空间。操作系统的进程表存储了CPU寄存器值、内存映像、打开的文件、统计信息、特权信息等。多个进程间并发共享同一个CPU以及其他硬件资源是透明的，操作系统提供进程之间的隔离。这种并发透明需要付出较高的代价。
- 线程，有时被称为轻量级进程（Lightweight Process，LWP），线程系统一般只维护用来让多个线程共享CPU所必须的最少量信息。**线程上下文（Thread Context）中一般只包含CPU上下文以及某些其他线程管理信息**
 
 
### 线程对象——Java
Runnable接口更灵活，可以继承别的类，且适用于高级线程管理API。
 
 
#### 线程管理
**sleep**
两种重载形式：毫秒级和纳秒级
   - 不保证精确
   - 睡眠周期可以通过中断来终止
 
 
**支持中断**
- 捕获InterruptedException异常
抛出InterruptedException异常的方法被设计成在收到中断时立即取消它们当前的操作并返回
*中断状态标志*是使用被称为中断状态的内部标准实现的。调用`Thread.interrupt`可以设置该标志。当一个线程通过调用静态方法`Thread.interrupted`来**检查(捕获)**中断时，中断状态被清除。实例方法`isInterrupted`用于线程来**查询**另一个线程的中断状态，而不会改变中断状态标志。
 
 
**join**
允许一个线程等待另一个线程完成。
*interrupt之后应该join一下？*
 
 
## 1.3 通信